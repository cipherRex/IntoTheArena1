@page "/todo/{info}"

@inject IJSRuntime JSRuntime;
@using IntoTheArena.Shared;

@*@using System.Net.Http*@
@inject HttpClient Http
@*@inject Arena _arena*@

@inject IHttpClientFactory HttpClientFactory

@using IntoTheArena.Client.Data
@inject NavigationManager navigationManager
@using System.Text.Json.Serialization
@layout EmptyLayout

<div class="webgl-content">
    <div id="unityContainer" style="width: 960px; height: 600px"></div>
    <div class="footer">
        <div class="webgl-logo"></div>
        <div class="fullscreen" onclick="unityInstance.SetFullscreen(1)"></div>
        <div class="title">unity6</div>
    </div>
</div>


@code
{
    [Parameter]
    public string Info { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("jsInterop.startGame");

            await JSRuntime.InvokeVoidAsync(
            "intoTheArenaFunctions.startGame");
        }

    }
}
@*<h3>Todo (@todos.Count(todo => !todo.IsDone))</h3>

    <ul>
        @foreach (var todo in todos)
        {
            <li>
                <input type="checkbox" @bind="todo.IsDone" />
                <input @bind="todo.Title" />
            </li>
        }
    </ul>

    <input placeholder="Something todo" @bind="newTodo" />
    <button @onclick="AddTodo">Add todo</button>

    @code {
        private IList<TodoItem> todos = new List<TodoItem>();
        private string newTodo;

        private void AddTodo()
        {
            if (!string.IsNullOrWhiteSpace(newTodo))
            {
                todos.Add(new TodoItem { Title = newTodo });
                newTodo = string.Empty;
            }
        }
    }*@