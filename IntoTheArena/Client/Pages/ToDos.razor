@page "/todo/{info}"

@inject IJSRuntime JSRuntime;
@using IntoTheArena.Shared;

@*@using System.Net.Http*@
@inject HttpClient Http
@*@inject Arena _arena*@
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory

@using IntoTheArena.Client.Data
@inject NavigationManager navigationManager
@using System.Text.Json.Serialization
@layout EmptyLayout
@using System.Text.Json
@using IntoTheArena.Shared.CombatManagement

<style>
    .disabledDiv {
        pointer-events: none;
        opacity: 0.4;
    }

    .enabledDiv {
        pointer-events: all;
        opacity: 1;
    }
</style>

<div class="webgl-content">
    <div id="unityContainer" style="width: 960px; height: 600px"></div>
    <div class="footer">
        <div class="webgl-logo"></div>
        <div class="fullscreen" onclick="unityInstance.SetFullscreen(1)"></div>
        <div class="title">unity6</div>
    </div>

    <div class="@_actionsClass">

        <div>
            <input type="radio" id="optSwing" name="action" value="Swing" @onclick="@(e => _action = CombatAction.SWING)">
            <label for="optSwing">Swing</label>
        </div>

        <div>
            <input type="radio" id="optBlock" name="action" value="Block" @onclick="@(e => _action = CombatAction.BLOCK)">
            <label for="optBlock">Block</label>
        </div>

        <div>
            <input type="radio" id="optRest" name="action" value="Rest" @onclick="@(e => _action = CombatAction.REST)">
            <label for="optRest">Rest</label>
        </div>

        <div>
            <button type="button" disabled="@DisallowSubmit" @onclick="submitMove">SUBMIT</button>

            @*<button type="button" @onclick="submitMove">SUBMIT</button>*@
        </div>
    </div>
</div>

<div>
    <button onclick="javascript: intoTheArenaFunctions.fooFunc();">Click me</button>
</div>


<div>
    <span>@_idleMessage</span>
</div>


@code
{
    private string _foo = "x";

    [Parameter]
    public string Info { get; set; }

    private string _role = "";
    private string _sessionId = "";
    private string _fighterId = "";
    private string _playerId = "";

    //private string _action = "";
    private CombatAction _action = CombatAction.UNASSIGNED;

    private static Action action;

    ChatClient _chatClient = null;

    public string _actionsClass = "disabledDiv";

    //[JSInvokable]
    //public static void InitializeCombat()
    //{
    //    action.Invoke();
    //}
    [JSInvokable]
    public static void OnAnimationIdle()
    {
        action.Invoke();
    }

    private void UpdateMessage()
    {
        Tuple<string, string> fighterIdAndSessionId = new Tuple<string, string>(_fighterId, _sessionId);
        var http = HttpClientFactory.CreateClient("IntoTheArena.AnonymousAPI");
        var response = http.PostAsJsonAsync("Combat/AnimationIdled", JsonSerializer.Serialize<Tuple<string, string>>(fighterIdAndSessionId));

        _foo = "UpdateMessage Called!";
        //_actionsClass = "enabledDiv";
        //StateHasChanged();
    }


    public bool DisallowSubmit
    {
        get
        {
            return _action == CombatAction.UNASSIGNED;
        }
    }

    protected override void OnInitialized()
    {
        action = UpdateMessage;


    }

    protected override async Task OnInitializedAsync()
    {

        //﻿{"SessionId":"e0231f99-e3de-422b-b991-4314fcc9ffb2","FighterId":"3a5c704b-07a9-4fcb-81f5-756c9bf6e054","Role":"Black"}

        dynamic dynamicInfo = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(this.Info);
        _role = dynamicInfo.Role;
        _sessionId = dynamicInfo.SessionId;
        _fighterId = dynamicInfo.FighterId;
        _playerId = dynamicInfo.PlayerId;


        _chatClient = new ChatClient(_playerId, navigationManager);
        await _chatClient.StartAsync();

        _chatClient.CombatRoundResult += OnCombatRoundResult;

        _chatClient.HandleAnimationsIdledResult += OnHandleAnimationsIdledResult;
    }

    public string _idleMessage = "i";

    //
    void OnHandleAnimationsIdledResult(object sender, CombatRoundResultEventArgs e)
    {
        _idleMessage = "OnHandleAnimationsIdledResult " + DateTime.Now.ToLongTimeString();

        _actionsClass = "enabledDiv";
        StateHasChanged();
    }


    //async void OnCombatRoundResult(object sender, CombatRoundResultEventArgs e)
    void OnCombatRoundResult(object sender, CombatRoundResultEventArgs e)
    {

        CombatResult combatResult = System.Text.Json.JsonSerializer.Deserialize<CombatResult>(e.MessageContent);

        string animationFunctionName = "";


        var unityParams = new
        {
            functionName = animationFunctionName,
            player1Special = "false",
            player2Special = "false",
            player1Bleed = "1",
            player2Bleed = "2",
            player1Heal = "false",
            player2Heal = "false",
            player1Taunt = "false",
            player2Taunt = "false"

        };

        string serializedDictionary = JsonSerializer.Serialize(unityParams);
        //string serializedDictionary = JsonSerializer.Serialize < Dictionary<string, string>>(unityParams);
        //string serializedDictionary = JsonSerializer.Serialize<KeyValuePair<string, string>>(unityParams);


        //JSRuntime.InvokeVoidAsync("intoTheArenaFunctions.triggerAnimation", JsonSerializer.Serialize(unityParams));
        JSRuntime.InvokeVoidAsync("intoTheArenaFunctions.triggerAnimation", serializedDictionary);

        _actionsClass = "enabledDiv";
        StateHasChanged();

    }

    private void ExecuteAnimation(AnimationCommand animationCommand, string fighterColor)
    {
        string functionName = "";

        switch (animationCommand)
        {
            case AnimationCommand.AC_SWING:
                functionName = "Swing";
                break;

            case AnimationCommand.AC_PARRY:
                functionName =  "Parry";
                break;

            case AnimationCommand.AC_COUNTERPARRY:
                functionName =  "CounterParry";
                break;

            case AnimationCommand.AC_KICK:
                functionName =  "Kick";
                break;

            case AnimationCommand.AC_CLEAVE:
                functionName =  "TwoHanded";
                break;

            case AnimationCommand.AC_BLOCK:
                functionName = "Block";
                break;

            case AnimationCommand.AC_GROINED:
                functionName = "Groined";
                break;

            case AnimationCommand.AC_HEAL:
                functionName = "Heal";
                break;

            case AnimationCommand.AC_CLEAVED:
                functionName = "Gashed";
                break;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("intoTheArenaFunctions.startGame");
        }
    }

    async void submitMove()
    {

        _actionsClass = "disabledDiv";
        StateHasChanged();

        CombatMove combatMove = new CombatMove() { SessionId = _sessionId, FighterId = _fighterId, PlayerId = _playerId, Action = _action };

        var http = HttpClientFactory.CreateClient("IntoTheArena.AnonymousAPI");
        var response = await http.PostAsJsonAsync("Combat/CombatMove", combatMove);
    }

    //void assignAction(char Action)
    //{
    //    switch (Action)
    //    {
    //        case 'S':
    //            _action = CombatAction.SWING;
    //            break;


    //        case 'B':
    //            _action = CombatAction.BLOCK;
    //            break;

    //        case 'R':
    //            _action = CombatAction.REST;
    //            break;

    //    }
    //    // _action = Action;
    //}
}
