@page "/todo/{info}"

@inject IJSRuntime JSRuntime;
@using IntoTheArena.Shared;

@*@using System.Net.Http*@
@inject HttpClient Http
@*@inject Arena _arena*@

@inject IHttpClientFactory HttpClientFactory

@using IntoTheArena.Client.Data
@inject NavigationManager navigationManager
@using System.Text.Json.Serialization
@layout EmptyLayout
@using System.Text.Json
@using IntoTheArena.Shared.CombatManagement

    <div class="webgl-content">
        <div id="unityContainer" style="width: 960px; height: 600px"></div>
        <div class="footer">
            <div class="webgl-logo"></div>
            <div class="fullscreen" onclick="unityInstance.SetFullscreen(1)"></div>
            <div class="title">unity6</div>
        </div>


        <div>
            <input type="radio" id="optSwing" name="action" value="Swing" @onclick="@(e => _action = CombatAction.SWING)">
            <label for="optSwing">Swing</label>
        </div>

        <div>
            <input type="radio" id="optBlock" name="action" value="Block" @onclick="@(e => _action = CombatAction.BLOCK)">
            <label for="optBlock">Block</label>
        </div>

        <div>
            <input type="radio" id="optRest" name="action" value="Rest" @onclick="@(e => _action = CombatAction.REST)">
            <label for="optRest">Rest</label>
        </div>

        <div>
            <button type="button" disabled="@DisallowSubmit" @onclick="submitMove">SUBMIT</button>
        </div>

    </div>


<div>
    <span>@_foo</span>
</div>

@code
{
    private string _foo = "x";

    [Parameter]
    public string Info { get; set; }

    private string _role = "";
    private string _sessionId = "";
    private string _fighterId = "";
    private string _playerId = "";

    //private string _action = "";
    private CombatAction _action = CombatAction.UNASSIGNED;

    ChatClient _chatClient = null;

    public bool DisallowSubmit
    {
        get
        {
            return _action == CombatAction.UNASSIGNED;
        }
    }


    protected override async Task OnInitializedAsync()
    {

        //﻿{"SessionId":"e0231f99-e3de-422b-b991-4314fcc9ffb2","FighterId":"3a5c704b-07a9-4fcb-81f5-756c9bf6e054","Role":"Black"}

        dynamic dynamicInfo = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(this.Info);
        _role = dynamicInfo.Role;
        _sessionId = dynamicInfo.SessionId;
        _fighterId = dynamicInfo.FighterId;
        _playerId = dynamicInfo.PlayerId;


        _chatClient = new ChatClient(_playerId, navigationManager);
        await _chatClient.StartAsync();

        _chatClient.CombatRoundResult += OnCombatRoundResult;

    }

    void OnCombatRoundResult(object sender, CombatRoundResultEventArgs e)
    {
        _foo = e.MessageContent;
        StateHasChanged();
        ;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("intoTheArenaFunctions.startGame");
        }
    }

    async void submitMove()
    {

        CombatMove combatMove = new CombatMove() { SessionId = _sessionId, FighterId = _fighterId, PlayerId = _playerId, Action = _action };

        var http = HttpClientFactory.CreateClient("IntoTheArena.AnonymousAPI");
        var response = await http.PostAsJsonAsync("Combat/CombatMove", combatMove);
    }

    //void assignAction(char Action)
    //{
    //    switch (Action)
    //    {
    //        case 'S':
    //            _action = CombatAction.SWING;
    //            break;


    //        case 'B':
    //            _action = CombatAction.BLOCK;
    //            break;

    //        case 'R':
    //            _action = CombatAction.REST;
    //            break;

    //    }
    //    // _action = Action;
    //}
}
